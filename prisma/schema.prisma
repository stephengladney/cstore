// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Menu {
    id           Int            @id @default(autoincrement())
    name         String
    store        Store          @relation(fields: [storeId], references: [id], onDelete: Cascade)
    storeId      Int            @default(1)
    createdAt    DateTime       @default(now())
    updatedAt    DateTime       @updatedAt
    MenuCategory MenuCategory[]
}

model MenuItem {
    id          Int          @id @default(autoincrement())
    name        String
    category    MenuCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)
    categoryId  Int
    description String?
    imageUrl    String?
    isAvailable Boolean      @default(true)
    price       Decimal      @db.Decimal(10, 2)
    createdAt   DateTime     @default(now())
    updatedAt   DateTime     @updatedAt
}

model MenuCategory {
    id        Int        @id @default(autoincrement())
    name      String
    menu      Menu       @relation(fields: [menuId], references: [id], onDelete: Cascade)
    menuId    Int
    createdAt DateTime   @default(now())
    updatedAt DateTime   @updatedAt
    MenuItem  MenuItem[]
}

model MenuOption {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Order {
    id            Int      @id @default(autoincrement())
    items         Json[]
    subtotal      Decimal  @db.Decimal(10, 2)
    tax           Decimal  @db.Decimal(10, 2)
    total         Decimal  @db.Decimal(10, 2)
    customerName  String
    customerPhone String
    store         Store    @relation(fields: [storeId], references: [id], onDelete: Cascade)
    storeId       Int      @default(1)
    isAccepted    Boolean  @default(false)
    createdAt     DateTime @default(now())
    updatedAt     DateTime @updatedAt
}

model Store {
    id                Int      @id @default(autoincrement())
    name              String
    address           String
    slug              String
    color             String   @default("#000")
    stripeAccountId   String?
    stripeAccessToken String?
    createdAt         DateTime @default(now())
    updatedAt         DateTime @updatedAt
    Menu              Menu[]
    Order             Order[]
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
