import type { GetServerSidePropsContext, NextPage } from "next"
import Head from "next/head"
import type { PopupActions } from "reactjs-popup/dist/types"
import { useEffect, useReducer, useRef, useState } from "react"
import { reducer } from "../../reducers/cartReducer"
import { CartProvider } from "../../contexts/cartContext"

import { Header } from "../../components/Header/Header"
import { Body } from "../../components/Body/Body"
import { OrderingContainer } from "../../components/OrderingContainer/OrderingContainer"
import { PrismaClient } from "@prisma/client"
import { StoreProvider } from "../../contexts/storeContext"
import { getCookie, hasCookie } from "cookies-next"
import { CallbackHandler } from "../../components/CallbackHandler/CallbackHandler"
import { ModalOrderCart } from "../../components/ModalOrderCart/ModalOrderCart"
import { DimmerProvider } from "../../contexts/dimmerContext"
import { Dimmer } from "../../components/Dimmer"
import { Checkout } from "../../components/Checkout/Checkout"
import type { StoreType } from "../../types/StoreType"
import { NavMenu } from "../../components/NavMenu/NavMenu"

const prisma = new PrismaClient()

const StoreHome: NextPage<{
  store: StoreType
}> = ({ callback, store }: { callback?: string; store: StoreType }) => {
  const [cart, dispatch] = useReducer(reducer, {
    items: [],
    slug: store?.slug,
  })
  const [isDimmed, setIsDimmed] = useState(false)
  const [isMobileCheckout, setIsMobileCheckout] = useState(false)
  const [isNavMenuOpen, setIsNavMenuOpen] = useState(false)

  const cartModalRef = useRef<PopupActions>({
    open: () => undefined,
    close: () => undefined,
    toggle: () => undefined,
  })

  const openCartModal = () => {
    if (cart.items.length > 0) {
      setIsDimmed(true)
      cartModalRef.current.open()
    }
  }

  const closeCartModal = () => {
    setIsDimmed(false)
    cartModalRef.current.close()
  }

  useEffect(() => {
    if (!!store && hasCookie(`swiftCart_${store.slug}`)) {
      dispatch({
        type: "RESTORE_CART",
        payload: getCookie(`swiftCart_${store.slug}`) as string,
      })
    }
  }, [store])

  useEffect(() => {
    if (cart.items.length === 0 && isMobileCheckout) setIsMobileCheckout(false)
  }, [cart])

  if (store) {
    return (
      <>
        <Head>
          <title>{`${store.name} - Order Online`}</title>
          <meta name="description" content="Generated by create-t3-app" />
          <link rel="icon" href="/favicon.ico" />
        </Head>
        <Dimmer isDimmed={isDimmed} />
        <DimmerProvider value={{ isDimmed, setIsDimmed }}>
          <StoreProvider value={store}>
            <NavMenu
              isNavMenuOpen={isNavMenuOpen}
              setIsNavMenuOpen={setIsNavMenuOpen}
            />
            <CartProvider value={{ cart, dispatch, openCartModal }}>
              {isMobileCheckout && (
                <div className="animate-fadein p-4 pt-6">
                  <button
                    className="absolute top-4 right-4 rounded-full bg-slate-700 px-2 text-lg text-white outline-none hover:bg-slate-800"
                    onClick={() => setIsMobileCheckout(false)}
                  >
                    <div className="-mt-[2px]">&times;</div>
                  </button>
                  <h1 className="block pb-4 text-center font-poppins text-3xl font-bold text-slate-700">
                    Your Order
                  </h1>
                  <Checkout
                    closeModal={closeCartModal}
                    isMobileCheckout={true}
                    setIsMobileCheckout={setIsMobileCheckout}
                  />
                </div>
              )}
              {!isMobileCheckout && (
                <div className="flex h-screen flex-col">
                  <Header
                    openCartModal={() => setIsMobileCheckout(true)}
                    isNavMenuOpen={isNavMenuOpen}
                    setIsNavMenuOpen={setIsNavMenuOpen}
                    store={store}
                    callback={callback ?? ""}
                  />
                  <Body>
                    {callback ? (
                      <CallbackHandler callback={callback} />
                    ) : (
                      <OrderingContainer
                        openCartModal={() => setIsMobileCheckout(true)}
                      />
                    )}
                  </Body>
                </div>
              )}
              <ModalOrderCart
                cart={cart}
                closeModal={closeCartModal}
                modalRef={cartModalRef}
              />
            </CartProvider>
          </StoreProvider>
        </DimmerProvider>
      </>
    )
  } else return null
}

export default StoreHome

export async function getServerSideProps(context: GetServerSidePropsContext) {
  const propsToReturn: {
    props: {
      store: StoreType | null
      callback: string | null
    }
  } = { props: { store: null, callback: null } }
  try {
    const store = await prisma.store.findFirst({
      where: { slug: context.query.storeSlug as string },
    })
    await prisma.$disconnect()

    if (store) {
      const { id, color, name, phone, address, slug, stripeAccountId } = store
      propsToReturn.props.store = {
        id,
        color,
        name,
        address,
        phone,
        slug,
        stripeAccountId,
      }
    } else {
      return { redirect: { destination: "/" } }
    }

    if (context.query.success) propsToReturn.props.callback = "success"

    return propsToReturn
  } catch (e) {
    return propsToReturn
  }
}
