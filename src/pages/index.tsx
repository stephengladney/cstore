import { type NextPage } from "next"
import Head from "next/head"
import Link from "next/link"
import { signIn, signOut, useSession } from "next-auth/react"
import { useReducer } from "react"
import { initialCartState, reducer } from "../reducers/cartReducer"
import { CartProvider } from "../contexts/cartContext"

import { Header } from "../components/Header/Header"
import { Body } from "../components/Body/Body"
import { OrderingMenu } from "../components/OrderingMenu/OrderingMenu"
import { OrderingContainer } from "../components/OrderingContainer/OrderingContainer"
import { CartContainer } from "../components/OrderingCart/OrderingCart.styles"
import { api } from "../utils/api"

const Home: NextPage = () => {
  const hello = api.example.hello.useQuery({ text: "from tRPC" })
  const [cartState, dispatch] = useReducer(reducer, initialCartState)

  return (
    <>
      <Head>
        <title>Valero Kirkwood Market</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <CartProvider value={{ cartState, dispatch }}>
        <div className="flex h-screen flex-col">
          <Header />
          <Body>
            <OrderingContainer>
              {/* <OrderingMenu openModal={() => {}} setSelectedItem /> */}
            </OrderingContainer>
          </Body>
        </div>
      </CartProvider>
    </>
  )
}

export default Home

const AuthShowcase: React.FC = () => {
  const { data: sessionData } = useSession()

  const { data: secretMessage } = api.example.getSecretMessage.useQuery(
    undefined, // no input
    { enabled: sessionData?.user !== undefined }
  )

  return (
    <div className="flex flex-col items-center justify-center gap-4">
      <p className="text-center text-2xl text-white">
        {sessionData && <span>Logged in as {sessionData.user?.name}</span>}
        {secretMessage && <span> - {secretMessage}</span>}
      </p>
      <button
        className="rounded-full bg-white/10 px-10 py-3 font-semibold text-white no-underline transition hover:bg-white/20"
        onClick={sessionData ? () => void signOut() : () => void signIn()}
      >
        {sessionData ? "Sign out" : "Sign in"}
      </button>
    </div>
  )
}
